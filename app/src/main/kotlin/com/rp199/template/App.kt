/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.rp199.template

import com.rp199.template.configuration.AppConfig
import com.rp199.template.configuration.plugin.configureContentNegotiation
import com.rp199.template.configuration.plugin.configureKoin
import com.rp199.template.configuration.plugin.configureMetrics
import com.rp199.template.configuration.plugin.configureMonitoring
import com.rp199.template.configuration.plugin.configureRoutes
import com.sksamuel.hoplite.ConfigLoaderBuilder
import com.sksamuel.hoplite.addResourceSource
import io.ktor.serialization.ContentConverter
import io.ktor.server.application.Application
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import org.koin.ktor.ext.get
import org.slf4j.LoggerFactory

private val logger = LoggerFactory.getLogger("com.rp199.template.AppKt")

fun main(args: Array<String>) {
    try {
        embeddedServer(
            Netty,
            port = System.getenv("PORT")?.toInt() ?: 8080,
            module = Application::configureApp
        ).start(wait = true)
    } catch (t: Throwable) {
        logger.error(t.message, t)
        throw t
    }
}


fun Application.configureApp() {
    val config = ConfigLoaderBuilder.default()
        .addResourceSource("/application.yml")
        .build()
        .loadConfigOrThrow<AppConfig>()

    configureMetrics(config)
    configureKoin()
    configureMonitoring(config)
    configureContentNegotiation(converter = get<ContentConverter>())
    configureRoutes()
}